openapi: 3.0.0
info:
  title: Rafiki Core Connector Outbound API
  version: 0.0.1
paths:
  /:
    get:
      summary: Health check endpoint
      operationId: HealthGet
      description: >-
        This endpoint allows a user of the SDK scheme adapter to check the
        outbound transfers service is listening.
      tags:
        - Health
      responses:
        '200':
          description: >-
            Returns empty body if the scheme adapter outbound transfers service
            is running.
  /open-payments/{ID}/{Type}/incoming-payments:
    post:
      summary: ''
      description: ''
      operationId: OpenPaymentsIdTypeIncomingPaymentsPost
      parameters:
        - $ref: '#/components/parameters/Type'
        - $ref: '#/components/parameters/ID'
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/IDTypeIncomingPaymentsPostRequest'
      responses:
        default:
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IDTypeIncomingPaymentsPostResponse'
  /rafiki/webhook/incoming-payment:
    post:
      summary: ''
      description: ''
      operationId: RafikiWebHookIncomingPaymentEvent
      requestBody:
        description: ''
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RafikiWebHookIncomingPaymentRequest'
      responses:
        200:
          $ref: "#/components/responses/200"
        404:
          $ref: "#/components/responses/404"
        503:
          $ref: "#/components/responses/503"

  # /rafiki/webhook/outgoing-payment:
  #   post:
  #     summary: ''
  #     description: ''
  #     operationId: RafikiWebHookOutgoingPaymentEvent
  #     requestBody:
  #       description: ''
  #       content:
  #         application/json:
  #           schema:
  #             $ref: '#/components/schemas/RafikiWebHookOutgoingPaymentRequest'
  #     responses:
  #       200:
  #         $ref: "#/components/responses/200"
  #       404:
  #         $ref: "#/components/responses/404"
  #       503:
  #         $ref: "#/components/responses/503"
components:
  responses:
    "200":
      description: OK
    "404":
      description: Not Found
    "503":
      description: Service Unavailable
  schemas:
    Currency:
      title: Currency
      description: >-
        The currency codes defined in [ISO
        4217](https://www.iso.org/iso-4217-currency-codes.html) as three-letter
        alphabetic codes are used as the standard naming representation for
        currencies.
      type: string
      minLength: 3
      maxLength: 3
      enum:
        - AED
        - AFN
        - ALL
        - AMD
        - ANG
        - AOA
        - ARS
        - AUD
        - AWG
        - AZN
        - BAM
        - BBD
        - BDT
        - BGN
        - BHD
        - BIF
        - BMD
        - BND
        - BOB
        - BRL
        - BSD
        - BTN
        - BWP
        - BYN
        - BZD
        - CAD
        - CDF
        - CHF
        - CLP
        - CNY
        - COP
        - CRC
        - CUC
        - CUP
        - CVE
        - CZK
        - DJF
        - DKK
        - DOP
        - DZD
        - EGP
        - ERN
        - ETB
        - EUR
        - FJD
        - FKP
        - GBP
        - GEL
        - GGP
        - GHS
        - GIP
        - GMD
        - GNF
        - GTQ
        - GYD
        - HKD
        - HNL
        - HRK
        - HTG
        - HUF
        - IDR
        - ILS
        - IMP
        - INR
        - IQD
        - IRR
        - ISK
        - JEP
        - JMD
        - JOD
        - JPY
        - KES
        - KGS
        - KHR
        - KMF
        - KPW
        - KRW
        - KWD
        - KYD
        - KZT
        - LAK
        - LBP
        - LKR
        - LRD
        - LSL
        - LYD
        - MAD
        - MDL
        - MGA
        - MKD
        - MMK
        - MNT
        - MOP
        - MRO
        - MUR
        - MVR
        - MWK
        - MXN
        - MYR
        - MZN
        - NAD
        - NGN
        - NIO
        - NOK
        - NPR
        - NZD
        - OMR
        - PAB
        - PEN
        - PGK
        - PHP
        - PKR
        - PLN
        - PYG
        - QAR
        - RON
        - RSD
        - RUB
        - RWF
        - SAR
        - SBD
        - SCR
        - SDG
        - SEK
        - SGD
        - SHP
        - SLL
        - SOS
        - SPL
        - SRD
        - STD
        - SVC
        - SYP
        - SZL
        - THB
        - TJS
        - TMT
        - TND
        - TOP
        - TRY
        - TTD
        - TVD
        - TWD
        - TZS
        - UAH
        - UGX
        - USD
        - UYU
        - UZS
        - VEF
        - VND
        - VUV
        - WST
        - XAF
        - XCD
        - XDR
        - XOF
        - XPF
        - XTS
        - XXX
        - YER
        - ZAR
        - ZMW
        - ZWD
    Amount:
      title: Amount
      type: object
      properties:
        value:
          type: number
        assetCode:
          $ref: '#/components/schemas/Currency'
        assetScale:
          type: number
    IDTypeIncomingPaymentsPostRequest:
      title: BulkTransfersPostRequest
      type: object
      description: The object sent in the POST /{ID}/{Type}/incoming-payments request.
      properties:
        incomingAmount:
          $ref: '#/components/schemas/Amount'
        expiresAt:
          $ref: '#/components/schemas/DateTime'
        description:
          type: string
        externalRef:
          type: string
      required:
        - expiresAt
        - externalRef
    IDTypeIncomingPaymentsPostResponse:
      title: BulkTransfersPostResponse
      type: object
      description: The object sent in the POST /{ID}/{Type}/incoming-payments response.
      properties:
        id:
          type: string
        paymentPointer:
          type: string
        completed:
          type: boolean
        receivedAmount:
          $ref: '#/components/schemas/Amount'
        description:
          type: string
        createdAt:
          $ref: '#/components/schemas/DateTime'
        updatedAt:
          $ref: '#/components/schemas/DateTime'
      required:
        - id
        - paymentPointer
        - completed
        - receivedAmount
        - description
        - createdAt
        - updatedAt
    RafikiWebHookIncomingPaymentRequest:
      title: RafikiWebHookIncomingPaymentRequest
      type: object
      description: >-
        Rafiki itself does not hold any balances but needs to be funded for outgoing transfers and moneyneeds to be withdrawn for incoming transfers. In order to notify the Account Servicing Entity about those transfer events, they need to expose a webhook endpoint that listens for these events and reacts accordingly. (Refer https://github.com/interledger/rafiki/blob/main/docs/integration.md#webhook-events)
      properties:
        id:
          $ref: '#/components/schemas/CorrelationId'
        type:
          type: string
          enum:
          - IncomingPaymentCompleted
          - IncomingPaymentExpired
        data:
          type: object
          properties:
            incomingPayment:
              type: object
              properties:
                id:
                  type: string
                paymentPointerId:
                  type: string
                description:
                  type: string
                incomingAmount:
                  $ref: '#/components/schemas/Amount'
                receivedAmount:
                  $ref: '#/components/schemas/Amount'
                completed:
                  type: boolean
                externalRef:
                  type: string
                createdAt:
                  $ref: '#/components/schemas/DateTime'
                updatedAt:
                  $ref: '#/components/schemas/DateTime'
                expiresAt:
                  $ref: '#/components/schemas/DateTime'
  
    RafikiWebHookIncomingPaymentCallback:
      title: RafikiWebHookIncomingPaymentCallback
      type: object
      description: >-
        Rafiki itself does not hold any balances but needs to be funded for outgoing transfers and moneyneeds to be withdrawn for incoming transfers. In order to notify the Account Servicing Entity about those transfer events, they need to expose a webhook endpoint that listens for these events and reacts accordingly. (Refer https://github.com/interledger/rafiki/blob/main/docs/integration.md#webhook-events)
      properties:
        code:
          $ref: '#/components/schemas/CorrelationId'
        success:
          type: string
        message:
          description: Is this the ilpFulfilment?
          type: string
        payment:
          type: object
          properties:
            id:
              $ref: '#/components/schemas/CorrelationId'
            paymentPointerId:
              type: string
            state:
              type: string
            expiresAt:
              $ref: '#/components/schemas/DateTime'
            stateAttempts:
              type: number
            sendAmount:
              $ref: '#/components/schemas/Amount'
            receiveAmount:
              $ref: '#/components/schemas/Amount'
            externalref:
              $ref: '#/components/schemas/CorrelationId'
            sentAmount:
              $ref: '#/components/schemas/Amount'
            createdAt:
              $ref: '#/components/schemas/DateTime'
              
    RafikiWebHookOutgoingPaymentRequest:
      title: RafikiWebHookOutgoingPaymentRequest
      type: object
      description: >-
        Rafiki itself does not hold any balances but needs to be funded for outgoing transfers and moneyneeds to be withdrawn for incoming transfers. In order to notify the Account Servicing Entity about those transfer events, they need to expose a webhook endpoint that listens for these events and reacts accordingly. (Refer https://github.com/interledger/rafiki/blob/main/docs/integration.md#webhook-events)
      properties:
        id:
          $ref: '#/components/schemas/CorrelationId'
        type:
          type: string
          enum:
          - OutgoingPaymentCreated
          - OutgoingPaymentCompleted
          - OutgoingPaymentFailed
        data:
          type: object
          properties:
            payment:
              type: object
              properties:
                id:
                  type: string
                paymentPointerId:
                  type: string
                description:
                  type: string
                receiver:
                  type: string
                sendAmount:
                  $ref: '#/components/schemas/Amount'
                receiveAmount:
                  $ref: '#/components/schemas/Amount'
                completed:
                  type: boolean
                externalRef:
                  type: string
                sentAmount:
                  $ref: '#/components/schemas/Amount'
                state:
                  type: string
                  enum:
                  - FUNDING
                  - SENDING
                  - FAILED
                  - COMPLETED
                createdAt:
                  $ref: '#/components/schemas/DateTime'
                updatedAt:
                  $ref: '#/components/schemas/DateTime'

    DateTime:
      title: DateTime
      type: string
      pattern: >-
        ^(?:[1-9]\d{3}-(?:(?:0[1-9]|1[0-2])-(?:0[1-9]|1\d|2[0-8])|(?:0[13-9]|1[0-2])-(?:29|30)|(?:0[13578]|1[02])-31)|(?:[1-9]\d(?:0[48]|[2468][048]|[13579][26])|(?:[2468][048]|[13579][26])00)-02-29)T(?:[01]\d|2[0-3]):[0-5]\d:[0-5]\d(?:(\.\d{3}))(?:Z|[+-][01]\d:[0-5]\d)$
      description: >-
        The API data type DateTime is a JSON String in a lexical format that is
        restricted by a regular expression for interoperability reasons. The
        format is according to [ISO
        8601](https://www.iso.org/iso-8601-date-and-time-format.html), expressed
        in a combined date, time and time zone format. A more readable version
        of the format is yyyy-MM-ddTHH:mm:ss.SSS[-HH:MM]. Examples are
        "2016-05-24T08:38:08.699-04:00", "2016-05-24T08:38:08.699Z" (where Z
        indicates Zulu time zone, same as UTC).
      example: '2016-05-24T08:38:08.699-04:00'
    QuoteResponse:
      title: QuoteResponse
      type: object
      description: ''
      properties:
        code:
          $ref: '#/components/schemas/CorrelationId'
        success:
          type: boolean
        message:
          type: object
          properties:
            name:
              type: string
        quote:
          $ref: '#/components/schemas/Quote'
    Quote:
      title: Quote
      type: object
      description: ''
      properties:
        id:
          $ref: '#/components/schemas/CorrelationId'
        paymentPointerId:
          type: string
        receiver:
          type: string
        sendAmount:
          $ref: '#/components/schemas/Amount'
        receiveAmount:
          $ref: '#/components/schemas/Amount'
        maxPacketAmount:
          type: number
        minExchangeRate:
          type: number
          format: float
        lowEstimatedExchangeRate:
          type: number
          format: float
        highEstimatedExchangeRate:
          type: number
          format: float
        createdAt:
          $ref: '#/components/schemas/DateTime'
        updatedAt:
          $ref: '#/components/schemas/DateTime'
    CorrelationId:
      title: CorrelationId
      type: string
      pattern: >-
        ^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$
      description: >-
        Identifier that correlates all messages of the same sequence. The API
        data type UUID (Universally Unique Identifier) is a JSON String in
        canonical format, conforming to [RFC
        4122](https://tools.ietf.org/html/rfc4122), that is restricted by a
        regular expression for interoperability reasons. A UUID is always 36
        characters long, 32 hexadecimal symbols and 4 dashes (‘-‘).
      example: b51ec534-ee48-4575-b6a9-ead2955b8069
  parameters:
    Type:
      name: Type
      in: path
      required: true
      schema:
        type: string
      description: The type of the party identifier. For example, `MSISDN`, `PERSONAL_ID`.
    ID:
      name: ID
      in: path
      required: true
      schema:
        type: string
      description: The identifier value.
